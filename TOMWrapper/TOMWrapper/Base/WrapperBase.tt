<#@ template debug="false" hostspecific="true" language="C#" #>
<#@output extension=".generated.cs"#>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Linq" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="$(SolutionDir)\packages\Microsoft.AnalysisServices.retail.amd64.19.22.5\lib\net45\Microsoft.AnalysisServices.Tabular.dll" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.AnalysisServices.Tabular" #>
<#@include file="Rules.ttinclude"#>
// Code generated by a template
using System;
using System.Linq;
using System.Collections.Generic;
using System.ComponentModel;
using TabularEditor.PropertyGridUI;
using TabularEditor.PropertyGridUI.Converters;
using TabularEditor.TOMWrapper.Undo;
using System.Drawing.Design;
using TOM = Microsoft.AnalysisServices.Tabular;

namespace TabularEditor.TOMWrapper
{
<#
   Rules.XmlDocFile = Host.ResolvePath(@"..\..\..\packages\Microsoft.AnalysisServices.retail.amd64.19.22.5\lib\net45\Microsoft.AnalysisServices.Tabular.xml");

   if(!File.Exists(Rules.XmlDocFile)) {
	   throw new Exception("Could not locate file: " + Rules.XmlDocFile);
   }
    
#>    internal static partial class Properties
    {
<# var TOMWrapperProperties = new[]{ "TranslatedNames", "TranslatedDescriptions", "TranslatedDisplayFolders", "InPerspective" };
   foreach(string pn in Rules.ObjectTypes.Keys
	   .SelectMany(t => t.GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly))
	   .Select(p => p.Name).Distinct().Concat(TOMWrapperProperties).OrderBy(p => p)) { #>
	    public const string <#= pn.ToUpper() #> = "<#= pn #>";
<# } #>
    }

	internal static class ObjectMetadata
	{
		private static readonly Dictionary<Type, Type> TOMMap = new Dictionary<Type, Type>() {
<# foreach(var t in Rules.ObjectTypes.Keys) { #>
            { typeof(<#= t.Name #>) , typeof(TOM.<#= t.Name #>) },
<# } #>	    };

		public static Type ToTOM(Type wrapperType) {
			return TOMMap[wrapperType];
		}

		public static Type FromTOM(Type tomType) {
			return TOMMap.FirstOrDefault(kvp => kvp.Value == tomType).Key;
		}

		public static readonly Type[] Creatable = {
<# foreach(var t in Rules.ObjectTypes.Keys.Where(obj => Rules.IsCreatable(obj))) { #>
            typeof(<#= t.Name #>),
<# } #>	        typeof(MPartition),
            typeof(EntityPartition),
            typeof(PolicyRangePartition),
			typeof(CalculatedTable),
			typeof(CalculationGroupTable)
        };
	}
<#
   foreach(var t in Rules.EnumTypes) {
#>
	<#= Rules.GetTypeXmlDoc(t) #>
	public enum <#= t.Name #> {    
<# foreach(var value in Enum.GetValues(t)) { #>
        <#= Enum.GetName(t, value) #> = <#= (int)value #>,
<# } #>
	}
<# }
   foreach(var t in Rules.ObjectTypes.Keys) {
	   var props = t.GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly);
       var allProps = t.GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.FlattenHierarchy);
#>  
	<#= Rules.GetTypeXmlDoc(t) #>
	[TypeConverter(typeof(DynamicPropertyConverter))]
	public <#= t.IsAbstract ? "abstract " : (Rules.Sealed(t) ? "sealed " : "") #>partial class <#= t.Name #>: <#= Rules.ObjectTypes[t]
#><#= props.Any(p => p.Name == "DisplayFolder") ? "\n\t\t\t, IFolderObject" : ""
#><#= props.Any(p => p.Name == "IsHidden") ? "\n\t\t\t, IHideableObject" : ""
#><#= props.Any(p => p.Name == "ErrorMessage") ? "\n\t\t\t, IErrorMessageObject" : ""
#><#= props.Any(p => p.Name == "Table" && t.Name != "CalculationGroup" && t.Name != "TablePermission") ? "\n\t\t\t, ITabularTableObject" : ""
#><#= props.Any(p => p.Name == "Description") ? "\n\t\t\t, IDescriptionObject" : ""
#><#= props.Any(p => p.Name == "Expression" && t.Name != "NamedExpression") ? "\n\t\t\t, IExpressionObject" : ""
#><#= props.Any(p => p.Name == "FormatString") ? "\n\t\t\t, IFormattableObject" : ""
#><#= props.Any(p => p.Name == "LineageTag") ? "\n\t\t\t, ILineageTagObject" : ""
#><#= props.Any(p => p.Name == "Annotations") ? "\n\t\t\t, IInternalAnnotationObject" : ""
#><#= props.Any(p => p.Name == "ExtendedProperties") ? "\n\t\t\t, IInternalExtendedPropertyObject" : ""
#><#= Rules.IsPerspectiveObject(t) ? "\n\t\t\t, IInternalTabularPerspectiveObject" : ""
#><#= Rules.IsTranslatable(t) ? "\n\t\t\t, IInternalTranslatableObject" : ""
#><#= Rules.IsSynonymObject(t) ? "\n\t\t\t, ISynonymObject" : ""
#><#= Rules.IsCreatable(t) ? "\n\t\t\t, IClonableObject" : ""
#>
	{
	    internal new TOM.<#= t.Name #> MetadataObject 
		{ 
			get 
			{ 
				return base.MetadataObject as TOM.<#= t.Name #>; 
		    } 
			set 
			{ 
				base.MetadataObject = value; 
			}
		}

<#
	foreach(PropertyInfo p in props) 
	{   
	    if (p.Name == "ExtendedProperties") { #>
        private bool CanClearExtendedProperties() => GetExtendedPropertyCount() > 0;
        ///<summary>Removes all Extended Properties from this object.</summary>
        [IntelliSense("Removes all Extended Properties from this object.")]
        public void ClearExtendedProperties()
        {
            Handler.BeginUpdate("Clear extended properties");
            foreach(var extendedProperty in GetExtendedProperties().ToList()) {
                RemoveExtendedProperty(extendedProperty);
            }
            Handler.EndUpdate();
        }

		///<summary>The collection of Extended Properties on the current <#=Rules.SplitCamelCase(t.Name)#>.</summary>
        [DisplayName("Extended Properties"),NoMultiselect,Category("Metadata"),Description("The collection of Extended Properties on the current <#=Rules.SplitCamelCase(t.Name)#>."),Editor(typeof(ExtendedPropertyCollectionEditor), typeof(UITypeEditor))]
        [PropertyAction(nameof(ClearExtendedProperties))]
		public ExtendedPropertyCollection ExtendedProperties { get; private set; }

		///<summary>Returns true if an ExtendedProperty with the given name exists. Otherwise false.</summary>
		[IntelliSense("Returns true if an ExtendedProperty with the given name exists. Otherwise false.")]
		public bool HasExtendedProperty(string name) {
		    return MetadataObject.ExtendedProperties.ContainsName(name);
		}
		///<summary>Gets the type of the ExtendedProperty with the given index, assuming it exists.</summary>
		public ExtendedPropertyType GetExtendedPropertyType(int index) {
			return (ExtendedPropertyType)MetadataObject.ExtendedProperties[index].Type;
		}
		///<summary>Gets the type of the ExtendedProperty with the given name, assuming it exists.</summary>
		public ExtendedPropertyType GetExtendedPropertyType(string name) {
			return (ExtendedPropertyType)MetadataObject.ExtendedProperties[name].Type;
		}
		///<summary>Gets the value of the ExtendedProperty with the given index, assuming it exists.</summary>
		public string GetExtendedProperty(int index) {
			var ep = MetadataObject.ExtendedProperties[index];
			return ep.Type == TOM.ExtendedPropertyType.Json ? (ep as TOM.JsonExtendedProperty).Value : (ep as TOM.StringExtendedProperty).Value;
		}
		///<summary>Gets the value of the ExtendedProperty with the given name. Returns null if no such ExtendedProperty exists.</summary>
		[IntelliSense("Gets the value of the ExtendedProperty with the given name. Returns null if no such ExtendedProperty exists.")]
		public string GetExtendedProperty(string name) {
		    if(!HasExtendedProperty(name)) return null;
			var ep = MetadataObject.ExtendedProperties[name];
			return ep.Type == TOM.ExtendedPropertyType.Json ? (ep as TOM.JsonExtendedProperty).Value : (ep as TOM.StringExtendedProperty).Value;
		}
		///<summary>Sets the value of the ExtendedProperty with the given index, optionally specifiying the type (string or JSON) of the ExtendedProperty.</summary>
		public void SetExtendedProperty(int index, string value, ExtendedPropertyType type) {
			SetExtendedProperty(index, value, type, true);
		}
		void IInternalExtendedPropertyObject.SetExtendedProperty(int index, string value, ExtendedPropertyType type, bool undoable) {
			SetExtendedProperty(index, value, type, undoable);
		}
		internal void SetExtendedProperty(int index, string value, ExtendedPropertyType type, bool undoable) {
			var name = MetadataObject.ExtendedProperties[index].Name;
			SetExtendedProperty(name, value, type, undoable);
		}
		///<summary>Returns a unique name for a new ExtendedProperty.</summary>
		public string GetNewExtendedPropertyName() {
			return MetadataObject.ExtendedProperties.GetNewName("New ExtendedProperty");
		}
		///<summary>Sets the value of the ExtendedProperty having the given name. If no such ExtendedProperty exists, it will be created. If value is set to null, the ExtendedProperty will be removed.</summary>
		[IntelliSense("Sets the value of the ExtendedProperty having the given name. If no such ExtendedProperty exists, it will be created. If value is set to null, the ExtendedProperty will be removed.")]
		public void SetExtendedProperty(string name, string value, ExtendedPropertyType type) {
			SetExtendedProperty(name, value, type, true);
		}
		internal void SetExtendedProperty(string name, string value, ExtendedPropertyType type, bool undoable) {
			if(name == null) name = GetNewExtendedPropertyName();

			if(value == null) {
				// Remove ExtendedProperty if set to null:
				RemoveExtendedProperty(name);
				return;
			}

			if(GetExtendedProperty(name) == value) return;
			if(undoable) {
				bool cancel = false;
				OnPropertyChanging(Properties.EXTENDEDPROPERTIES, name + ":" + value, ref undoable, ref cancel);
				if (cancel) return;
			}

			if(MetadataObject.ExtendedProperties.Contains(name)) {
				// Change existing ExtendedProperty:
				var oldValue = GetExtendedProperty(name);
				var oldType = GetExtendedPropertyType(name);
				var ep = MetadataObject.ExtendedProperties[name];
				if (ep is TOM.JsonExtendedProperty)
					(ep as TOM.JsonExtendedProperty).Value = value;
				else 
					(ep as TOM.StringExtendedProperty).Value = value;
					
				if (undoable) Handler.UndoManager.Add(new UndoExtendedPropertyAction(this, name, value, oldValue, oldType));
				OnPropertyChanged(Properties.EXTENDEDPROPERTIES, name + ":" + oldValue, name + ":" + value);
			} else {
				// Add new ExtendedProperty:
				if (type == ExtendedPropertyType.Json)
					MetadataObject.ExtendedProperties.Add(new TOM.JsonExtendedProperty{ Name = name, Value = value });
				else
					MetadataObject.ExtendedProperties.Add(new TOM.StringExtendedProperty{ Name = name, Value = value });

				if (undoable) Handler.UndoManager.Add(new UndoExtendedPropertyAction(this, name, value, null, type));
				OnPropertyChanged(Properties.EXTENDEDPROPERTIES, null, name + ":" + value);
			}
		}
		void IInternalExtendedPropertyObject.SetExtendedProperty(string name, string value, ExtendedPropertyType type, bool undoable) {
			this.SetExtendedProperty(name, value, type, undoable);
		}

		///<summary>Remove an ExtendedProperty by the given name.</summary>
		[IntelliSense("Remove an ExtendedProperty by the given name.")]
		public void RemoveExtendedProperty(string name) {
			RemoveExtendedProperty(name, true);
		}

		internal void RemoveExtendedProperty(string name, bool undoable) {
			if(MetadataObject.ExtendedProperties.Contains(name)) {
				// Get current value:
				if(undoable) {
					bool cancel = false;
					OnPropertyChanging(Properties.EXTENDEDPROPERTIES, name + ":" + GetExtendedProperty(name), ref undoable, ref cancel);
					if (cancel) return;
				}

				var oldValue = GetExtendedProperty(name);
				var oldType = GetExtendedPropertyType(name);
				MetadataObject.ExtendedProperties.Remove(name);

				// Undo-handling:
				if (undoable) Handler.UndoManager.Add(new UndoExtendedPropertyAction(this, name, null, oldValue, oldType));
				OnPropertyChanged(Properties.EXTENDEDPROPERTIES, name + ":" + oldValue, null);
			}
		}
		void IInternalExtendedPropertyObject.RemoveExtendedProperty(string name, bool undoable) {
			this.RemoveExtendedProperty(name, undoable);
		}
		///<summary>Gets the number of ExtendedProperties on the current object.</summary>
		[IntelliSense("Gets the number of ExtendedProperties on the current object.")]
		public int GetExtendedPropertyCount() {
			return MetadataObject.ExtendedProperties.Count;
		}
		///<summary>Gets a collection of all ExtendedProperty names on the current object.</summary>
		[IntelliSense("Gets a collection of all ExtendedProperty names on the current object.")]
		public IEnumerable<string> GetExtendedProperties() {
			return MetadataObject.ExtendedProperties.Select(a => a.Name);
		}

		<# }

		if (p.Name == "Annotations") { #>
        private bool CanClearAnnotations() => GetAnnotationsCount() > 0;
        ///<summary>Removes all annotations from this object.</summary>
        [IntelliSense("Removes all annotations from this object.")]
        public void ClearAnnotations()
        {
            Handler.BeginUpdate("Clear annotations");
            foreach(var annotation in GetAnnotations().ToList()) {
                RemoveAnnotation(annotation);
            }
            Handler.EndUpdate();
        }

		///<summary>The collection of Annotations on the current <#=Rules.SplitCamelCase(t.Name)#>.</summary>
        [Browsable(true),NoMultiselect,Category("Metadata"),Description("The collection of Annotations on the current <#=Rules.SplitCamelCase(t.Name)#>."),Editor(typeof(AnnotationCollectionEditor), typeof(UITypeEditor))]
        [PropertyAction(nameof(ClearAnnotations))]
		public AnnotationCollection Annotations { get; private set; }
		///<summary>Gets the value of the annotation with the given index, assuming it exists.</summary>
		[IntelliSense("Gets the value of the annotation with the given index, assuming it exists.")]
		public string GetAnnotation(int index) {
			return MetadataObject.Annotations[index].Value;
		}
		///<summary>Returns true if an annotation with the given name exists. Otherwise false.</summary>
		[IntelliSense("Returns true if an annotation with the given name exists. Otherwise false.")]
		public bool HasAnnotation(string name) {
		    return MetadataObject.Annotations.ContainsName(name);
		}
		///<summary>Gets the value of the annotation with the given name. Returns null if no such annotation exists.</summary>
		[IntelliSense("Gets the value of the annotation with the given name. Returns null if no such annotation exists.")]
		public string GetAnnotation(string name) {
		    return HasAnnotation(name) ? MetadataObject.Annotations[name].Value : null;
		}
		///<summary>Sets the value of the annotation with the given index, assuming it exists.</summary>
		[IntelliSense("Sets the value of the annotation with the given index, assuming it exists.")]
		public void SetAnnotation(int index, string value) {
		    SetAnnotation(index, value, true);
		}
		internal void SetAnnotation(int index, string value, bool undoable) {
		    var name = MetadataObject.Annotations[index].Name;
			SetAnnotation(name, value, undoable);
		}
		void IInternalAnnotationObject.SetAnnotation(int index, string value, bool undoable) {
			SetAnnotation(index, value, undoable);
		}
		///<summary>Returns a unique name for a new annotation.</summary>
		public string GetNewAnnotationName() {
			return MetadataObject.Annotations.GetNewName("New Annotation");
		}
		///<summary>Sets the value of the annotation having the given name. If no such annotation exists, it will be created. If value is set to null, the annotation will be removed.</summary>
		[IntelliSense("Sets the value of the annotation having the given name. If no such annotation exists, it will be created. If value is set to null, the annotation will be removed.")]
		public void SetAnnotation(string name, string value) {
		    SetAnnotation(name, value, true);
		}
		internal void SetAnnotation(string name, string value, bool undoable) {
			if(name == null) name = GetNewAnnotationName();

			if(value == null) {
				// Remove annotation if set to null:
				RemoveAnnotation(name, undoable);
				return;
			}

			if(undoable) {
 				if(GetAnnotation(name) == value) return;
				bool undoable2 = true;
				bool cancel = false;
				OnPropertyChanging(Properties.ANNOTATIONS, name + ":" + value, ref undoable2, ref cancel);
				if (cancel) return;
			}

			if(MetadataObject.Annotations.Contains(name)) {
				// Change existing annotation:

				var oldValue = GetAnnotation(name);
				MetadataObject.Annotations[name].Value = value;
				if (undoable) {
					Handler.UndoManager.Add(new UndoAnnotationAction(this, name, value, oldValue));
					OnPropertyChanged(Properties.ANNOTATIONS, name + ":" + oldValue, name + ":" + value);
				}
			} else {
				// Add new annotation:

				MetadataObject.Annotations.Add(new TOM.Annotation{ Name = name, Value = value });
				if (undoable) {
					Handler.UndoManager.Add(new UndoAnnotationAction(this, name, value, null));
					OnPropertyChanged(Properties.ANNOTATIONS, null, name + ":" + value);
				}
			}
		}
		void IInternalAnnotationObject.SetAnnotation(string name, string value, bool undoable) {
			this.SetAnnotation(name, value, undoable);
		}
		///<summary>Remove an annotation by the given name.</summary>
		[IntelliSense("Remove an annotation by the given name.")]
		public void RemoveAnnotation(string name) {
		    RemoveAnnotation(name, true);
		}
		internal void RemoveAnnotation(string name, bool undoable) {
			if(MetadataObject.Annotations.Contains(name)) {
				if(undoable) 
				{
				    bool undoable2 = true;
				    bool cancel = false;
				    OnPropertyChanging(Properties.ANNOTATIONS, name + ":" + GetAnnotation(name), ref undoable2, ref cancel);
				    if (cancel) return;
				}

			    var oldValue = MetadataObject.Annotations[name].Value;
				MetadataObject.Annotations.Remove(name);

				if (undoable) 
				{
					Handler.UndoManager.Add(new UndoAnnotationAction(this, name, null, oldValue));
					OnPropertyChanged(Properties.ANNOTATIONS, name + ":" + oldValue, null);
			    }
			}
		}
		void IInternalAnnotationObject.RemoveAnnotation(string name, bool undoable) {
			this.RemoveAnnotation(name, undoable);
		}
		///<summary>Gets the number of annotations on the current <#=Rules.SplitCamelCase(t.Name)#>.</summary>
		[IntelliSense("Gets the number of annotations on the current <#=Rules.SplitCamelCase(t.Name)#>.")]
		public int GetAnnotationsCount() {
			return MetadataObject.Annotations.Count;
		}
		///<summary>Gets a collection of all annotation names on the current <#=Rules.SplitCamelCase(t.Name)#>.</summary>
		[IntelliSense("Gets a collection of all annotation names on the current <#=Rules.SplitCamelCase(t.Name)#>.")]
		public IEnumerable<string> GetAnnotations() {
			return MetadataObject.Annotations.Select(a => a.Name);
		}

		<# }

		if (Rules.ShouldWrapProperty(p, t)) { #>
<#= Rules.GetPropertyXmlDoc(t, p.Name) #>
		[DisplayName("<#= Rules.GetDisplayName(p.Name, t.Name) #>")]
		[Category("<#= Rules.GetCategory(p.Name, t.Name) #>"),Description(@"<#= Rules.GetPropertyDescription(t, p.Name)#>"),IntelliSense(@"<#= Rules.GetPropertyDescription(t, p.Name)#>")]<#= Rules.GetOtherAttributes(p.Name, t.Name) #>
		public <#= Rules.PropertyType(p) #> <#= p.Name #> {
			<#= Rules.PropertyGetter(p) #>
			<#= Rules.PropertySetter(p) #>
		}
		private bool ShouldSerialize<#= p.Name #>() { return false; }
<#		}
		if (p.Name == "DisplayFolder") { #>
        /// <summary>
        /// Collection of localized Display Folders for the current <#=Rules.SplitCamelCase(t.Name)#>.
        /// </summary>
        [Browsable(true),DisplayName("Translated Display Folders"),Description("Shows all translated Display Folders of the current <#=Rules.SplitCamelCase(t.Name)#>."),Category("Translations, Perspectives, Security")]
	    public TranslationIndexer TranslatedDisplayFolders { private set; get; }
<#		}
		if (p.Name == "Table") { #>
		///<summary>The parent table of the current <#=Rules.SplitCamelCase(t.Name)#>.</summary>
		[Browsable(false)]
		public Table Table
		{ 
			get 
			{ 
				TabularObject t = null;
				if(MetadataObject == null || MetadataObject.Table == null) return null;
				if(!Handler.WrapperLookup.TryGetValue(MetadataObject.Table, out t)) {
				    if(!MetadataObject.Table.IsRemoved)
						t = Model.Tables[MetadataObject.Table.Name];
				}
				return t as Table;
			} 
		}
<#      }
	}#>

<# if (Rules.IsPerspectiveObject(t)) { #>
        /// <Summary>
		/// Collection of perspectives in which this <#= t.Name #> is visible.
		/// </Summary>
		[Browsable(true),DisplayName("Shown in Perspective"), Description("Provides an easy way to include or exclude the current <#=Rules.SplitCamelCase(t.Name)#> from the perspectives of the model."), Category("Translations, Perspectives, Security")]
        public Perspective<#= t.Name #>Indexer InPerspective { get; private set; }
		PerspectiveIndexer ITabularPerspectiveObject.InPerspective { get { return this.InPerspective; } }
<# } if (Rules.IsTranslatable(t)) { #>
        /// <summary>
        /// Collection of localized descriptions for this <#= t.Name #>.
        /// </summary>
        [Browsable(true),DisplayName("Translated Descriptions"),Description("Shows all translated descriptions of the current <#=Rules.SplitCamelCase(t.Name)#>."),Category("Translations, Perspectives, Security")]
	    public TranslationIndexer TranslatedDescriptions { private set; get; }
        /// <summary>
        /// Collection of localized names for this <#= t.Name #>.
        /// </summary>
        [Browsable(true),DisplayName("Translated Names"),Description("Shows all translated names of the current <#=Rules.SplitCamelCase(t.Name)#>."),Category("Translations, Perspectives, Security")]
	    public TranslationIndexer TranslatedNames { private set; get; }

<# } if (Rules.IsSynonymObject(t)) { #>
        /// <summary>
        /// Collection of localized synonyms for this <#= t.Name #>.
        /// </summary>
        [Browsable(true),DisplayName("Synonyms"),Description("Shows all translated synonyms of the current <#=Rules.SplitCamelCase(t.Name)#>."),Category("Translations, Perspectives, Security")]
	    public SynonymIndexer Synonyms { private set; get; }
<# } if (!t.IsAbstract && Rules.InCollection(t)) { #>
		internal static <#= t.Name #> CreateFromMetadata(<#= Rules.GetParent(t) #> parent, TOM.<#= t.Name #> metadataObject) {
<# if (allProps.Any(p => p.Name == "LineageTag")) { #>
            // Generate a new LineageTag if an object with the provided lineage tag already exists:
            if(!string.IsNullOrEmpty(metadataObject.LineageTag)) {
                if (parent.Handler.CompatibilityLevel < 1540) metadataObject.LineageTag = null;
                else if (parent.MetadataObject.<#= Rules.GetCollection(t) #>.FindByLineageTag(metadataObject.LineageTag) != metadataObject) {
                    metadataObject.LineageTag = Guid.NewGuid().ToString();
                }
            }
<# } #>
			var obj = new <#= t.Name #>(metadataObject);
			parent.<#= Rules.GetCollection(t) #>.Add(obj);
			
			obj.Init();

			return obj;
		}

<# if (Rules.IsCreatable(t)) { #>

		/// <summary>
		/// Creates a new <#= t.Name #> and adds it to the parent <#= Rules.GetParent(t) #>.
		/// Also creates the underlying metadataobject and adds it to the TOM tree.
		/// </summary>
		public static <#= t.Name #> CreateNew(<#= Rules.GetParent(t) #> parent, string name = null)
		{
			if(!parent.Handler.PowerBIGovernance.AllowCreate(typeof(<#= t.Name #>))) {
				throw new InvalidOperationException(string.Format(Messages.CannotCreatePowerBIObject,typeof(<#= t.Name #>).GetTypeName()));
			}

			var metadataObject = new TOM.<#= t.Name #>();
<# if(allProps.Any(p => p.Name == "LineageTag")) { #>
            if(parent.Model.Database.CompatibilityLevel >= 1540) metadataObject.LineageTag = Guid.NewGuid().ToString();
<# } #>
			metadataObject.<#=typeof(ModelRoleMember).IsAssignableFrom(t)?"Member":""#>Name = parent.<#= Rules.GetCollection(t) #>.GetNewName(string.IsNullOrWhiteSpace(name) ? "New " + typeof(<#= t.Name #>).GetTypeName() : name);
            InitMetadata(metadataObject, parent);
            var obj = new <#= t.Name #>(metadataObject);

			parent.<#= Rules.GetCollection(t) #>.Add(obj);
			
			obj.Init();

			return obj;
		}

        static partial void InitMetadata(TOM.<#= t.Name #> metadataObject, <#= Rules.GetParent(t) #> parent);

<# // Create parameterless constructors for objects at Model scope (perspectives, roles, etc.)
if(Rules.GetParent(t) == "Model") { #>
		/// <summary>
		/// Creates a new <#= t.Name #> and adds it to the current Model.
		/// Also creates the underlying metadataobject and adds it to the TOM tree.
		/// </summary>		
		public static <#= t.Name #> CreateNew(string name = null)
		{
			return CreateNew(TabularModelHandler.Singleton.Model, name);
		}

<# } #>

		/// <summary>
		/// Creates an exact copy of this <#= t.Name #> object.
		/// </summary>
		[IntelliSense("Creates an exact copy of this <#= t.Name #> object.")]
		public <#= Rules.Sealed(t) ? "" : "virtual " #><#= t.Name #> Clone(string newName = null<#= 
Rules.IsTranslatable(t, true) ? ", bool includeTranslations = true" : "" #><#=
Rules.GetParent(t) != "Model" ? ", " + Rules.GetParent(t) + " newParent = null" : "" #>) {
			if(!Handler.PowerBIGovernance.AllowCreate(this.GetType())) {
				throw new InvalidOperationException(string.Format(Messages.CannotCreatePowerBIObject,typeof(<#= t.Name #>).GetTypeName()));
			}

		    Handler.BeginUpdate("Clone <#= t.Name #>");

			// Create a clone of the underlying metadataobject:
			var tom = MetadataObject.Clone() as TOM.<#= t.Name #>;

<# if(t.Name == "Table") { #>
			// Make sure that measures on the table are renamed:
			foreach(var m in tom.Measures) m.Name = tom.Measures.GetNewName(m.Name);

            // Make sure new lineage tags are generated:
            if(Model.Database.CompatibilityLevel >= 1540 && !string.IsNullOrEmpty(LineageTag)) {
                tom.LineageTag = Guid.NewGuid().ToString();
                foreach(var m in tom.Measures) m.LineageTag = Guid.NewGuid().ToString();
                foreach(var c in tom.Columns) c.LineageTag = Guid.NewGuid().ToString();
                foreach(var h in tom.Hierarchies) {
                    h.LineageTag = Guid.NewGuid().ToString();
                    foreach(var l in h.Levels) l.LineageTag = Guid.NewGuid().ToString();
                }
            }
<# } else if(t.Name == "Hierarchy") { #>
            if(Model.Database.CompatibilityLevel >= 1540 && !string.IsNullOrEmpty(LineageTag)) {
                tom.LineageTag = Guid.NewGuid().ToString();
                foreach(var l in tom.Levels) l.LineageTag = Guid.NewGuid().ToString();
            }
<# } else if(allProps.Any(p => p.Name == "LineageTag")) { #>
            if(Model.Database.CompatibilityLevel >= 1540 && !string.IsNullOrEmpty(LineageTag)) {
                tom.LineageTag = Guid.NewGuid().ToString();
            }
<# } #>

			// Assign a new, unique name:
			tom.Name = Parent.<#= Rules.GetCollection(t) #>.GetNewName(string.IsNullOrEmpty(newName) ? tom.Name + " copy" : newName);
				
			// Create the TOM Wrapper object, representing the metadataobject
			<#= t.Name #> obj <# if(t.Name == "Table") { #>;
			if(this is CalculatedTable) obj = CalculatedTable.CreateFromMetadata(Parent, tom);
			else if(this is CalculationGroupTable) obj = CalculationGroupTable.CreateFromMetadata(Parent, tom);
			else obj <# } #>= CreateFromMetadata(<#= Rules.GetParent(t) != "Model" ? "newParent ?? " : "" #>Parent, tom);

<# if (Rules.IsTranslatable(t, true)) { #>
			// Copy translations, if applicable:
			if(includeTranslations) {
				obj.CopyTranslationsFrom(this);
<# foreach(var c in Rules.GetChildCollections(t).Where(c => Rules.IsTranslatable(c.Key))) { #>
				foreach(var objChild in obj.<#= Rules.CollectionName(c.Key) #>) objChild.CopyTranslationsFrom(obj.<#= Rules.CollectionName(c.Key) #>[objChild.MetadataIndex]);
<# } #>
			}
<# } if (Rules.IsPerspectiveObject(t, true)) { #>
				
			// Copy perspectives:
			obj.InPerspective.CopyFrom(InPerspective);

<# } if (Rules.CloneRequiresDependencyTreeRebuild(t)) { #>
			// TODO: Make sure that dependency trees are properly rebuilt when IDaxDependantObjects are cloned
			// FormulaFixup.BuildDependencyTree(this);
<# } #>
<# if(t.Name == "Table") { #>
			Handler.UpdateFolders(obj);
<# } #>
            Handler.EndUpdate();

            return obj;
		}

		TabularNamedObject IClonableObject.Clone(string newName, bool includeTranslations, TabularNamedObject newParent) 
		{
<#  if (Rules.GetParent(t) == "Model") { #>
			if (newParent != null) throw new ArgumentException("This object can not be cloned to another parent. Argument newParent should be left as null.", "newParent");
<# } #>
			return Clone(newName<#= Rules.IsTranslatable(t) ? ", includeTranslations" : "" #>);
		}

<# } } #>
	
        internal override void RenewMetadataObject()
        {
            Handler.WrapperLookup.Remove(MetadataObject);
            var json = TOM.JsonSerializer.SerializeObject(MetadataObject, RenewMetadataOptions);
            MetadataObject = TOM.JsonSerializer.DeserializeObject<TOM.<#=t.Name#>>(json);
            Handler.WrapperLookup.Add(MetadataObject, this);
        }

<# if (Rules.InCollection(t)) { #>
		///<summary>The parent <#=Rules.SplitCamelCase(Rules.GetParent(t))#> of the current <#=Rules.SplitCamelCase(t.Name)#>.</summary>
		public <#= Rules.ObjectTypes[t] != "TabularNamedObject" && Rules.InCollection(t.BaseType) ? "new " : ""#><#= Rules.GetParent(t) #> Parent { 
			get {
				return Handler.WrapperLookup[MetadataObject.Parent] as <#= Rules.GetParent(t) #>;
			}
		}
<# } #>

<# if(Rules.HasCollections(t)) { #>
        internal override ITabularObjectCollection GetCollectionForChild(TabularObject child)
        {
<# if(t.Name == "Column") { #>
			if (child is AlternateOf) return null;
<# } foreach(var c in Rules.GetChildCollections(t)) { #>
			if (child is <#= c.Key.Name #>) return <#= Rules.CollectionName(c.Key) #>;
<# } #>
            return base.GetCollectionForChild(child);
        }
<# } #>

<# foreach(var c in Rules.GetChildCollections(t)) {
		var colName = Rules.CollectionName(c.Key);	
 #>
        /// <summary>
        /// The collection of <#= c.Key.Name #> objects on this <#= t.Name #>.
        /// </summary>
		[DisplayName("<#= Rules.GetDisplayName(colName, t.Name) #>")]
		[Category("<#= Rules.GetCategory(colName, t.Name) #>"),IntelliSense("The collection of <#= Rules.GetDisplayName(c.Key.Name, t.Name) #> objects on the current <#=Rules.SplitCamelCase(t.Name)#>.")]<#= Rules.GetOtherAttributes(colName, t.Name) #>
		public <#= c.Key.Name #>Collection <#= colName #> { get; <#= Rules.Sealed(t) ? "private" : "protected" #> set; }
<# } #>

		/// <summary>
		/// CTOR - only called from static factory methods on the class
		/// </summary>
		<#= Rules.Sealed(t) ? "" : "protected "#><#= t.Name #>(TOM.<#= t.Name #> metadataObject) : base(metadataObject)
		{
<# if(Rules.IsTranslatable(t)) { #>
			// Create indexers for translations:
			TranslatedNames = new TranslationIndexer(this, TOM.TranslatedProperty.Caption);
			TranslatedDescriptions = new TranslationIndexer(this, TOM.TranslatedProperty.Description);
<# } if(Rules.IsSynonymObject(t)) { #>
			Synonyms = new SynonymIndexer(this);
<# } if(props.Any(p => p.Name == "DisplayFolder")) { #>
			TranslatedDisplayFolders = new TranslationIndexer(this, TOM.TranslatedProperty.DisplayFolder);
<# } if(Rules.IsPerspectiveObject(t)) { #>

			// Create indexer for perspectives:
			InPerspective = new Perspective<#= t.Name #>Indexer(this);
<# } if(props.Any(p => p.Name == "Annotations")) { #>
			
			// Create indexer for annotations:
			Annotations = new AnnotationCollection(this);
<# } if(props.Any(p => p.Name == "ExtendedProperties")) { #>
			
			// Create indexer for extended properties:
			ExtendedProperties = new ExtendedPropertyCollection(this);
<# }#>
<# if(Rules.HasCollections(t)) { #>
			
			// Instantiate child collections:
<#		foreach(var c in Rules.GetChildCollections(t)) { var colName = Rules.CollectionName(c.Key); #>
			<#= colName #> = new <#= c.Key.Name #>Collection(this.GetObjectPath() + ".<#= colName #>", MetadataObject.<#= colName #>, this);
<#		} #>

			// Populate child collections:
<#		foreach(var c in Rules.GetChildCollections(t)) { var colName = Rules.CollectionName(c.Key); #>
			<#= colName #>.CreateChildrenFromMetadata();
<#		} #>

			// Hook up event handlers on child collections:
<#		foreach(var c in Rules.GetChildCollections(t)) { var colName = Rules.CollectionName(c.Key); #>
			<#= colName #>.CollectionChanged += Children_CollectionChanged;
<#		} #>
<# } #>
		}


<# if(Rules.HasCollections(t)) { #>
		internal override void Reinit() {
<#		foreach(var c in Rules.GetChildCollections(t)) { var colName = Rules.CollectionName(c.Key); #>
			<#= colName #>.Reinit();
<#		} #>
		}
<# } #>

		internal override void Undelete(ITabularObjectCollection collection, Type tomObjectType, string tomJson) {
			base.Undelete(collection, tomObjectType, tomJson);
			Reinit();
			ReapplyReferences();
<# if(t.Name == "Table") { #>
			Handler.Tree.RebuildFolderCacheForTable(this);
<# } #>
		}
		internal override <#= Rules.Seal(t) ? "sealed " : "" #>bool Browsable(string propertyName) {
			// Allow custom overrides to hide a property regardless of its compatibility level requirements:
			if(!base.Browsable(propertyName)) return false;

			switch (propertyName) {

				// Hide properties based on compatibility requirements (inferred from TOM):
<# foreach(var prop in props.Where(p => p.Name != "Parent").OrderBy(p => p.Name)) { var cr = Rules.GetCompatRequirement(t, prop.Name); if(cr.Pbi == 1200 && cr.Box == 1200) continue; #>
				case Properties.<#= prop.Name.ToUpper() #>:
					return <# if(cr.Pbi == int.MaxValue && cr.Box == int.MaxValue) { #>false;<# } else {#>Handler.PbiMode ? <#= cr.Pbi == int.MaxValue ? "false" : "Handler.CompatibilityLevel >= " + cr.Pbi #> : <#= cr.Box == int.MaxValue ? "false" : "Handler.CompatibilityLevel >= " + cr.Box #>;<# } #>

<# } if(Rules.InCollection(t)) { #>
				case Properties.PARENT:
					return false;
<# } if(Rules.IsSynonymObject(t)) { #>
				case nameof(Synonyms):
					return Synonyms.LinguisticCultures.Any();
<# } if(Rules.IsTranslatable(t)) { #>
				
				// Hides translation properties in the grid, unless the model actually contains translations:
				case Properties.TRANSLATEDNAMES:
				case Properties.TRANSLATEDDESCRIPTIONS:
<#     if(Rules.HasDisplayFolder(t)) { #>
				case Properties.TRANSLATEDDISPLAYFOLDERS:
<#     } #>
					return Model.Cultures.Any();
<# } if(Rules.IsPerspectiveObject(t)) { #>
				
				// Hides the perspective property in the grid, unless the model actually contains perspectives:
				case Properties.INPERSPECTIVE:
					return Model.Perspectives.Any();
<# } #>				
				default:
					return true;
			}
		}

    }

<#  if (Rules.NeedsCollection(t)) { #>

	/// <summary>
	/// Collection class for <#= t.Name #>. Provides convenient properties for setting a property on multiple objects at once.
	/// </summary>
	public sealed partial class <#= t.Name #>Collection: TabularObjectCollection<<#= t.Name == "Relationship" ? "SingleColumnRelationship" : t.Name #>>
	{
		internal <#= Rules.GetParent(t) #> <#= Rules.GetParent(t) #> { get { return Parent as <#= Rules.GetParent(t) #>; } }
		TOM.<#= t.Name #>Collection TOM_Collection;
		internal <#= t.Name #>Collection(string collectionName, TOM.<#= t.Name #>Collection metadataObjectCollection, <#= Rules.GetParent(t) #> parent) : base(collectionName, parent)
		{
			TOM_Collection = metadataObjectCollection;
		}
		internal override Type GetItemType() { return typeof(<#= t.Name #>); }
        internal override void TOM_Add(TOM.MetadataObject obj) { TOM_Collection.Add(obj as TOM.<#= t.Name #>); }
        internal override bool TOM_Contains(TOM.MetadataObject obj) { return TOM_Collection.Contains(obj as TOM.<#= t.Name #>); }
        internal override void TOM_Remove(TOM.MetadataObject obj) { TOM_Collection.Remove(obj as TOM.<#= t.Name #>); }
        internal override void TOM_Clear() { TOM_Collection.Clear(); }
        internal override bool TOM_ContainsName(string name) { return TOM_Collection.ContainsName(name); }
<# if (t.Name != "Column") { #>
		internal override TOM.MetadataObject TOM_Get(int index) { return TOM_Collection[index]; }
<# } #>
        internal override TOM.MetadataObject TOM_Get(string name) { return TOM_Collection[name]; }
        internal override TOM.MetadataObject TOM_Find(string name) { return TOM_Collection.Find(name); }
<# if (t.Name != "Measure" && t.Name != "Relationship" && t.Name != "Column") { #>
        internal override string GetNewName(string prefix = null) { return string.IsNullOrEmpty(prefix) ? TOM_Collection.GetNewName() : TOM_Collection.GetNewName(prefix); }
<# } if (t.Name == "Relationship") { #> 
		internal override string GetNewName(string prefix = null) { return Guid.NewGuid().ToString(); }
<# } if (t.Name != "Column") { #>
        internal override int IndexOf(TOM.MetadataObject obj) { return TOM_Collection.IndexOf(obj as TOM.<#= t.Name #>); }
        /// <summary>The number of items in this collection.</summary>
		public override int Count { get { return TOM_Collection.Count; } }
		/// <summary>Returns an enumerator that iterates through the collection.</summary>
        public override IEnumerator<<#= t.Name == "Relationship" ? "SingleColumnRelationship" : t.Name #>> GetEnumerator() { return TOM_Collection.Select(h => Handler.WrapperLookup[h]).OfType<<#= t.Name == "Relationship" ? "SingleColumnRelationship" : t.Name #>>().GetEnumerator(); }
<# } #>
		internal override void Reinit() {
			var ixOffset = 0;
			for(int i = 0; i < Count; i++) {
				var metadataObj = TOM_Get(i) as TOM.<#= t.Name #>;
				var item = Handler.WrapperLookup.TryGetValue(metadataObj, out var existingItem) ? existingItem as <#= t.Name #> : CreateFromMetadata(metadataObj);
				Handler.WrapperLookup.Remove(item.MetadataObject);
<# if (t.Name == "Column") { #>
				if(Table.MetadataObject.Columns[i] is TOM.RowNumberColumn) ixOffset++;
<# } #>
				item.MetadataObject = <#= Rules.GetParent(t) #>.MetadataObject.<#= Rules.CollectionName(t) #>[i + ixOffset] as TOM.<#= t.Name == "Relationship" ? "SingleColumnRelationship" : t.Name #>;
				Handler.WrapperLookup.Add(item.MetadataObject, item);
				item.Collection = this;
			}
			TOM_Collection = <#= Rules.GetParent(t) #>.MetadataObject.<#= Rules.CollectionName(t) #>;
			foreach(var item in this) item.Reinit();
		}

		internal override void ReapplyReferences() {
			foreach(var item in this) item.ReapplyReferences();
		}

		private <#= t.Name #> CreateFromMetadata(TOM.<#= t.Name #> obj)
		{
<# if (t.Name == "Table") { #>
            if (obj.Partitions[0].SourceType == TOM.PartitionSourceType.Calculated) return CalculatedTable.CreateFromMetadata(Model, obj);
			else if (obj.Partitions[0].SourceType == TOM.PartitionSourceType.CalculationGroup) return CalculationGroupTable.CreateFromMetadata(Model, obj);
            else return Table.CreateFromMetadata(Model, obj);
<# } else if (t.Name == "Partition") { #>
			if(obj.SourceType == TOM.PartitionSourceType.M) return MPartition.CreateFromMetadata(<#= Rules.GetParent(t) #>, obj);
            else if(obj.SourceType == TOM.PartitionSourceType.Entity) return EntityPartition.CreateFromMetadata(<#= Rules.GetParent(t) #>, obj);
            else if(obj.SourceType == TOM.PartitionSourceType.PolicyRange) return PolicyRangePartition.CreateFromMetadata(<#= Rules.GetParent(t) #>, obj);
			else return Partition.CreateFromMetadata(<#= Rules.GetParent(t) #>, obj);
<# } else
{
   foreach(var derived in Rules.GetDerivedTypes(t)) { #>
			if(obj is TOM.<#= derived.Name #> <#= derived.Name.ToLower() #>Obj) return <#= derived.Name #>.CreateFromMetadata(<#= Rules.GetParent(t) #>, <#= derived.Name.ToLower() #>Obj);
<# }
} #>		    return null;
		}

		/// <summary>
		/// Calling this method will populate the <#= t.Name #>Collection with objects based on the MetadataObjects in the corresponding MetadataObjectCollection.
		/// </summary>
		internal override void CreateChildrenFromMetadata()
		{
			// Construct child objects (they are automatically added to the Handler's WrapperLookup dictionary):
			foreach(var obj in TOM_Collection)
			{
				CreateFromMetadata(obj);
			}
		}

<#      foreach(PropertyInfo p in props) 
		{   
			if (Rules.ShouldWrapCollectionProperty(p, t)) { #>
		/// <summary>
		/// Sets the <#= p.Name #> property of all objects in the collection at once.
		/// </summary>
		[Description("Sets the <#= p.Name #> property of all objects in the collection at once.")]
		public <#= Rules.PropertyType(p) #> <#= p.Name #> {
			set {
				if(Handler == null) return;
				Handler.UndoManager.BeginBatch(UndoPropertyChangedAction.GetActionNameFromProperty("<#= p.Name #>"));
				this.ToList().ForEach(item => { item.<#= p.Name #> = value; });
				Handler.UndoManager.EndBatch();
			}
		}
<#          }
        } #>
	}
<#  } #>
<#
    }
#>
}